#!/usr/bin/env python

import os
import sys
from subprocess import Popen, PIPE, STDOUT

class bcolors:
    OKGREEN = '\033[92m'
    FAIL = '\033[91m'

def error_print(s):
    print bcolors.FAIL + s,

def success_print(s):
    print bcolors.OKGREEN + s,

if len(sys.argv) < 2:
    raise ValueError('run_tests requires an argument (the command to run your solution)')

for file_num in sorted(os.listdir('tests/')):
    try:
        test_contents = open('tests/' + file_num, 'r').read()
        test_contents = test_contents.split("\n\n")
        (name, inp, out) = (test_contents[0], test_contents[1], test_contents[2].strip())

        try:
            p = Popen(sys.argv[1].split(), stdout=PIPE, stdin=PIPE, stderr=PIPE)
        except OSError:
            raise ValueError('the argument passed to run_tests must be a runnable command')

        stdout_data, stderr_data = p.communicate(input=inp)
        stdout_data = stdout_data.strip()

        errored = p.returncode != 0
        correct = stdout_data == out

        if correct:
            success_print("Test #" + file_num + " passed\n")
        else:
            if errored:
                error_print("Test #" + file_num + " failed ERRORED\n")
            else:
                error_print("Test #" + file_num + " failed (" + name + ")\n")
                error_print("  Expected: " + out + "\n")
                error_print("  Got     : " + stdout_data + "\n")
    except IOError:
        ()
